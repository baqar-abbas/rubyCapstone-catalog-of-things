CREATE SCHEMA items;

CREATE TABLE items.item (
  id INT GENERATED BY DEFAULT AS IDENTITY NO NULL PRIMARY KEY,
  published_date DATE,
  archived BOOLEAN,
  label VARCHAR(255),
  genre VARCHAR(255),
  author VARCHAR(255)
);

CREATE TABLE items.genre (
  id INT GENERATED BY DEFAULT AS IDENTITY NOT NULL PRIMARY KEY,
  name VARCHAR(255),
  item_id INT REFERENCES items.item(id)
);

CREATE TABLE items.music_album (
  id INT GENERATED BY DEFAULT AS IDENTITY NOT NULL PRIMARY KEY
  genre VARCHAR(255),
  on_spotify BOOLEAN,
  published_date DATE,
  archived BOOLEAN,
  label VARCHAR(255)
);

ALTER TABLE items.music_album
  ADD CONSTRAINT fk_music_album_genre
  FOREIGN KEY (genre)
  REFERENCES items.genre(id);

-- Create authors table
CREATE TABLE items.author(
  id INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
  first_name VARCHAR(40),
  last_name VARCHAR(40)
);

-- create games table
CREATE TABLE items.game(
  id INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
  publish_date DATE,
  multiplayer VARCHAR(50),
  last_played_at DATE,
  author_id INT REFERENCES author(id)
);

-- Create labels table
CREATE TABLE LABEL(
  id INTEGER GENERATED ALWAYS AS INDENTITY PRIMARY KEY,
  title VARCHAR(255),
  color VARCHAR(255)
);

-- Create books table
CREATE TABLE BOOK(
  id INTEGER GENERATED ALWAYS AS INDENTITY PRIMARY KEY,
  publish_date DATE,
  publisher VARCHAR(255),
  cover_state VARCHAR(255),
  genre_id INT,
  author_id INT,
  label_id INT,
  CONSTRAINT fk_book_genre FOREIGN KEY (genre_id) REFERENCES GENRES(id),
  CONSTRAINT fk_book_author FOREIGN KEY (author_id) REFERENCES AUTHORS(id),
  CONSTRAINT fk_book_label FOREIGN KEY (label_id) REFERENCES LABELS(id)
);